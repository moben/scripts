#!/bin/bash

if [[ ${#} -ne 4 ]]; then
    echo "needs 4 args: <old snapshot> <old root> <new snapshot> <new root>"
    exit 127
fi

old_snap=${1}
old_root=${2}
new_snap=${3}
new_root=${4}

declare -a ignores=()

shopt -s extglob
shopt -s nullglob
shopt -s dotglob

has() {
    needle=${1}
    shift

    for hay in "${@}"; do
        if [[ ${needle} == ${hay} ]]; then
            return 0
        fi
    done
    return 1
}

# nonfatal
edo() {
    [[ ${#} -ge 1 ]] || { echo "edo needs args"; return; }
    echo "    ${@}"
    "${@}" || echo "FAILED: ${@}"
}

_config_copy() {
    [[ ${#} -eq 3 ]] || { echo "_config_copy needs 2 args"; return; }
    local src_dir=${1} dst_dir=${2} file=${3}
    local cfg i=0
    
    while cfg=$(printf "._cfg%04d_${file}" ${i}); [[ -f ${dst_dir}/${cfg} ]]; do
        i=$((++i))
    done

    edo cp -aT ${src_dir}/${file} ${dst_dir}/${cfg}
}

_read_ignores() {
    mapfile -t ignores < "${1}"/rebase-root.ignores
}

_write_ignores() {
    nr=${1}
    shift

    for i in "${@}"; do
        echo "${i}" >> "${nr}"/rebase-root.ignores
    done
}

_ask_copy_ignore() {
    local action

    while true; do
        read -p "Action? [c]opy/[i]gnore/[s]kip: " -e  action
        if [[ ${action} == c ]]; then
            return 0
        elif [[ ${action} == i ]]; then
            read -p "Ignore path: " -e -i "${1}" ignore
            ignore=${ignore%%*(/)}
            ignores+=( "${ignore}" )
            return 1
        fi
    done
}

_rebase_root() {
    if [[ ${#} -ne 4 ]]; then
        echo "needs 4 args: <old snapshot> <old root> <new snapshot> <new root>"
        exit 127
    fi
    
    for p in "${2}"/*; do
        f=${p##${old_root}*(/)}

        if has "${f}" "${ignores[@]}" || has "${f%+(/).*}" "${ignores[@]}"; then
            echo "IGNORED: ${f}"
            continue
        fi

        if [[ -L ${old_root}/${f} ]]; then
            if [[ $(readlink "${old_root}/${f}") != $(readlink "${old_snap}/${f}") ]]; then
                echo "CHANGED SYMLINK: ${f} $(readlink "${old_snap}/${f}") -> $(readlink "${old_root}/${f}")"
                if _ask_copy_ignore "${f}"; then
                    edo cp -aT "${old_root}/${f}" "${new_root}/${f}"
                fi
            fi
        elif [[ -d ${old_root}/${f} ]]; then
            if [[ ! -d ${old_snap}/${f} ]]; then
                echo "NEW DIR: ${f}"
                if _ask_copy_ignore "${f}"; then
                    edo cp -aT "${old_root}/${f}" "${new_root}/${f}"
                fi
            else
#                echo "RECURSING INTO ${f}"
                _rebase_root {"${1}","${2}","${3}","${4}"}/"${f}"
            fi
        elif [[ -f ${old_root}/${f} ]]; then
            if [[ ! -e ${old_snap}/${f} ]]; then
                echo "NEW FILE: ${f}"
                if _ask_copy_ignore "${f}"; then
                    edo cp -aT "${old_root}/${f}" "${new_root}/${f}"
                fi
            else
                if diff -q "${old_root}/${f}" "${old_snap}/${f}" &>/dev/null; then
                    # same
                    :;
                else
                    echo "MODIFIED: ${f}"
                    if _ask_copy_ignore "${f}"; then
                        _config_copy "${old_root}" "${new_root}" "${f}"
                    fi
                fi
            fi     
        fi
    done
}

_read_ignores "${old_root}"

_rebase_root "${@}"

_write_ignores "${new_root}" "${ignores[@]}"

